import pandas as pd
from io import BytesIO
import requests
import re
import time
from collections import Counter
from statistics import mean, median
from django.http import HttpResponse, JsonResponse
from django.shortcuts import get_object_or_404
from django.utils.timezone import is_aware
from django.db.models import Avg, Count, FloatField
from django.db.models.functions import Cast

from rest_framework import permissions, serializers, status
from rest_framework.views import APIView
from rest_framework.response import Response
from drf_spectacular.utils import (
    extend_schema,
    inline_serializer,
    OpenApiResponse,
    OpenApiParameter
)

from surveys.models import (
    Surveys, RespondentSurveyStatus, RespondentAnswers, SurveyQuestions
)
from accounts.models import RespondentCharacteristics


# ==========================================================
# üîπ 1. Anonymized Data View ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
# ==========================================================
class AnonymizedDataView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞",
        description=(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –æ–¥–∏–Ω —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç. "
            "–°—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç email, –æ—Ü–µ–Ω–∫—É, –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã."
        ),
        tags=["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
        parameters=[
            OpenApiParameter(
                name="survey_id",
                description="ID –æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.",
                required=True,
                type=int,
                location=OpenApiParameter.PATH,
            )
        ],
        responses={
            200: OpenApiResponse(
                description="–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.",
                response=inline_serializer(
                    name="AnonymizedDataResponse",
                    fields={
                        "email": serializers.EmailField(),
                        "score": serializers.FloatField(),
                        "completed_at": serializers.DateTimeField(),
                        "question_text": serializers.CharField(help_text="–û—Ç–≤–µ—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"),
                    }
                ),
            ),
            404: OpenApiResponse(description="–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    )
    def get(self, request, survey_id: int):
        survey = get_object_or_404(Surveys, pk=survey_id)
        statuses = RespondentSurveyStatus.objects.filter(survey=survey, status="completed")
        questions = SurveyQuestions.objects.filter(survey=survey).select_related("question").order_by("order")

        data_rows = []
        for status in statuses:
            respondent_answers = RespondentAnswers.objects.filter(
                respondent=status.respondent, survey_question__survey=survey
            ).select_related("survey_question__question")

            row = {
                "email": status.respondent.email,
                "score": status.score,
                "completed_at": status.updated_at,
            }

            for sq in questions:
                answer_obj = next((a for a in respondent_answers if a.survey_question == sq), None)
                row[sq.question.text_question] = answer_obj.text_answer if answer_obj else ""

            data_rows.append(row)

        df = pd.DataFrame(data_rows)
        return JsonResponse(df.to_dict(orient="records"), safe=False)


# ==========================================================
# üîπ 2. Export Data View ‚Äî –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
# ==========================================================
class ExportDataView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞ (CSV –∏–ª–∏ XLSX)",
        description=(
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel.\n\n"
            "**–ü–æ–ª—è:** email, –æ—Ü–µ–Ω–∫–∞, –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã."
        ),
        request=inline_serializer(
            name="ExportRequest",
            fields={
                "format": serializers.ChoiceField(
                    choices=["csv", "xlsx"],
                    help_text="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî CSV.",
                    default="csv",
                )
            },
        ),
        responses={
            200: OpenApiResponse(description="–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"),
            404: OpenApiResponse(description="–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        },
        tags=["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
    )
    def post(self, request, survey_id: int):
        fmt = request.data.get("format", "csv")
        survey = get_object_or_404(Surveys, pk=survey_id)

        statuses = RespondentSurveyStatus.objects.filter(survey=survey, status="completed")
        questions = SurveyQuestions.objects.filter(survey=survey).select_related("question").order_by("order")

        data_rows = []
        for status in statuses:
            respondent_answers = RespondentAnswers.objects.filter(
                respondent=status.respondent, survey_question__survey=survey
            ).select_related("survey_question__question")

            row = {
                "email": status.respondent.email,
                "score": status.score,
                "completed_at": status.updated_at.replace(tzinfo=None)
                if is_aware(status.updated_at)
                else status.updated_at,
            }

            for sq in questions:
                answer_obj = next((a for a in respondent_answers if a.survey_question == sq), None)
                row[sq.question.text_question] = answer_obj.text_answer if answer_obj else ""

            data_rows.append(row)

        df = pd.DataFrame(data_rows)

        if fmt == "xlsx":
            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
                df.to_excel(writer, index=False)
            buffer.seek(0)
            response = HttpResponse(
                buffer,
                content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
            response["Content-Disposition"] = f'attachment; filename="survey_{survey_id}.xlsx"'
        else:
            csv_data = df.to_csv(index=False)
            response = HttpResponse(csv_data, content_type="text/csv")
            response["Content-Disposition"] = f'attachment; filename="survey_{survey_id}.csv"'

        return response


# ==========================================================
# üîπ 3. Dashboard Data View ‚Äî –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
#   –ò–∑–º–µ–Ω–µ–Ω–∏—è:
#   - rating: –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Ä–µ–¥–Ω–µ–µ
#   - date_time: –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è + —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
#   - text: –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
# ==========================================================
class DashboardDataView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤",
        description=(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø—Ä–æ—Å–∞.\n\n"
            "- –í—ã–±–æ—Ä–æ—á–Ω—ã–µ: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤\n"
            "- –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Å—Ä–µ–¥–Ω–µ–µ\n"
            "- –î–∞—Ç—ã/–≤—Ä–µ–º—è: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
            "- –¢–µ–∫—Å—Ç–æ–≤—ã–µ: —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI `/api/AI/summarize-text/` —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞"
        ),
        tags=["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
        parameters=[
            OpenApiParameter(
                name="survey_id", description="ID –æ–ø—Ä–æ—Å–∞", required=True, type=int, location=OpenApiParameter.PATH
            )
        ],
        responses={
            200: OpenApiResponse(
                description="–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞",
                response=inline_serializer(
                    name="DashboardResponse",
                    fields={
                        "survey_id": serializers.IntegerField(),
                        "dashboard": serializers.DictField(help_text="–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º"),
                    },
                ),
            )
        },
    )
    def get(self, request, survey_id: int):
        survey = get_object_or_404(Surveys, pk=survey_id)
        questions = SurveyQuestions.objects.filter(survey=survey).select_related("question").order_by("order")

        dashboard_data = {}

        for sq in questions:
            q = sq.question
            answers = RespondentAnswers.objects.filter(survey_question=sq)

            if not answers.exists():
                continue

            if q.type_question in ["single_choice", "multi_choice", "dropdown"]:
                distribution = answers.values("text_answer").annotate(count=Count("text_answer"))
                total = sum(item["count"] for item in distribution)
                for item in distribution:
                    item["percent"] = round(item["count"] / total * 100, 2)
                dashboard_data[q.text_question] = {
                    "type": q.type_question,
                    "distribution": list(distribution),
                }

            elif q.type_question == "rating":
                raw_vals = list(answers.values_list("text_answer", flat=True))
                nums = []
                for v in raw_vals:
                    try:
                        nums.append(float(v))
                    except Exception:
                        continue
                avg_value = round(mean(nums), 4) if nums else None
                dashboard_data[q.text_question] = {
                    "type": "rating",
                    "values": nums,
                    "average": avg_value,
                }

            elif q.type_question == "date_time":
                raw_vals = list(answers.values_list("text_answer", flat=True))
                distribution = answers.values("text_answer").annotate(count=Count("text_answer"))
                dashboard_data[q.text_question] = {
                    "type": "date_time",
                    "values": raw_vals,
                    "distribution": list(distribution),
                }

            else:
                text_list = [a.text_answer for a in answers if a.text_answer]
                if text_list:
                    summary = ""
                    try:
                        ai_url = f"{request.scheme}://{request.get_host()}/api/AI/summarize-text/"
                        # –ü–æ–≤—Ç–æ—Ä—ã —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ (connect/read)
                        # timeout=(connect_timeout, read_timeout)
                        attempts = 5
                        for i in range(attempts):
                            resp = requests.post(ai_url, json={"answers": text_list}, timeout=(5, 30))
                            if resp.status_code == 200:
                                data = resp.json()
                                summary = data.get("summary", "") or ""
                                if summary:
                                    break
                            # –±—ç–∫–æ—Ñ—Ñ: 0.5, 1, 2, 3, 3 —Å–µ–∫
                            delay = min(3.0, 0.5 * (2 ** i))
                            time.sleep(delay)
                        if not summary:
                            # –§–æ–ª–ª–±–µ–∫ ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            all_text = " ".join(text_list)
                            words = re.findall(r"\w+", all_text.lower())
                            freq = Counter(words)
                            top_words = [w for w, _ in freq.most_common(5)]
                            summary = "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: " + ", ".join(top_words)
                    except Exception:
                        all_text = " ".join(text_list)
                        words = re.findall(r"\w+", all_text.lower())
                        freq = Counter(words)
                        top_words = [w for w, _ in freq.most_common(5)]
                        summary = "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: " + ", ".join(top_words)

                else:
                    summary = ""

                dashboard_data[q.text_question] = {"type": "text", "summary": summary}

        return Response({"survey_id": survey_id, "dashboard": dashboard_data})


# ==========================================================
# üîπ 4. Respondent Dashboard View ‚Äî –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
#   –ò–∑–º–µ–Ω–µ–Ω–∏—è:
#   - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –∏ characteristics_summary
#   - –î–ª—è numeric: –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π (values) –≤–º–µ—Å—Ç–æ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
# ==========================================================
class RespondentDashboardView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
        description=(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.\n\n"
            "- choice: –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
            "- numeric: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
        ),
        tags=["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
        parameters=[
            OpenApiParameter(
                name="survey_id",
                description="ID –æ–ø—Ä–æ—Å–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
                required=True,
                type=int,
                location=OpenApiParameter.PATH,
            )
        ],
        responses={
            200: OpenApiResponse(
                description="–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
                response=inline_serializer(
                    name="RespondentDashboardResponse",
                    fields={
                        "respondents_count": serializers.IntegerField(),
                        "characteristics_summary": serializers.DictField(),
                    },
                ),
            )
        },
    )
    def get(self, request, survey_id: int):
        survey = get_object_or_404(Surveys, pk=survey_id)
        completed = RespondentSurveyStatus.objects.filter(survey=survey, status='completed').select_related('respondent')

        respondents_count = completed.count()
        all_characteristics = {}

        # –°–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        for st in completed:
            user = st.respondent
            chars = RespondentCharacteristics.objects.filter(user=user).select_related('characteristic_value__characteristic')

            for rc in chars:
                
                characteristic = rc.characteristic_value.characteristic
                value = rc.characteristic_value.value_text
                vtype = characteristic.value_type

                if characteristic.name not in all_characteristics:
                    all_characteristics[characteristic.name] = {"value_type": vtype, "values": []}
                all_characteristics[characteristic.name]["values"].append(value)

        # üîπ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        characteristics_summary = {}
        for name, data in all_characteristics.items():
            values = [v for v in data["values"] if v is not None]
            vtype = data["value_type"]
            if not values:
                continue

            if vtype in ["choice", "select", "dropdown"]:
                counter = Counter(values)
                total = sum(counter.values())
                dist = [
                    {"value": val, "count": cnt, "percent": round(cnt / total * 100, 2)}
                    for val, cnt in counter.items()
                ]
                characteristics_summary[name] = {"type": "choice", "distribution": dist}

            elif vtype in ["numeric", "number", "int", "float"]:
                nums = []
                for v in values:
                    try:
                        nums.append(float(v))
                    except Exception:
                        continue
                if not nums:
                    continue
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
                characteristics_summary[name] = {
                    "type": "numeric",
                    "values": nums,
                }

        return Response({
            "respondents_count": respondents_count,
            "characteristics_summary": characteristics_summary,
        })
