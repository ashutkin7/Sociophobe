import json
import traceback
from django.conf import settings
from rest_framework import serializers
from .models import Surveys, Questions, SurveyQuestions, RespondentAnswers, SurveyArchive, RespondentSurveyStatus
from django.utils import timezone
from django.shortcuts import get_object_or_404
from .models import RespondentAnswers
from core.models import SurveyRequiredCharacteristics


def log_validation_error(serializer_name: str, field_name: str, data, error):
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print("\n" + "=" * 80)
    print(f"‚ùå [VALIDATION ERROR] –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–µ: {serializer_name}")
    if field_name:
        print(f"üîπ –ü–æ–ª–µ: {field_name}")
    print(f"üîπ –û—à–∏–±–∫–∞: {error}")
    print(f"üîπ –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False, indent=2)}")
    print("-" * 80)
    traceback.print_exc()
    print("=" * 80 + "\n")


class SurveyCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Surveys
        fields = ['survey_id', 'name', 'date_finished', 'max_residents', 'status', 'type_survey', 'cost']
        read_only_fields = ['survey_id', 'status']


class SurveyDetailSerializer(serializers.ModelSerializer):
    class Meta:
        model = Surveys
        fields = ['survey_id', 'name', 'creator', 'date_finished', 'max_residents', 'status', 'type_survey', 'cost']


class SurveyUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Surveys
        fields = ['name', 'date_finished', 'max_residents', 'type_survey', 'cost']

# === QUESTIONS ===
class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Questions
        fields = ['question_id', 'text_question', 'type_question', 'extra_data']


class QuestionUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Questions
        fields = ['text_question', 'type_question', 'extra_data']

    def validate(self, data):
        serializer_name = self.__class__.__name__
        type_question = data.get('type_question', getattr(self.instance, 'type_question', None))
        extra = data.get('extra_data', getattr(self.instance, 'extra_data', {}))

        # --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ JSON ---
        if isinstance(extra, str):
            try:
                extra = json.loads(extra)
            except Exception as e:
                log_validation_error(serializer_name, "extra_data", data, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                raise serializers.ValidationError({"extra_data": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç."})

        if not isinstance(extra, dict):
            log_validation_error(serializer_name, "extra_data", data, "extra_data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º (dict)")
            raise serializers.ValidationError({"extra_data": "extra_data –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º (dict)."})

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —Ç–∏–ø—É –≤–æ–ø—Ä–æ—Å–∞ ---
        try:
            if type_question in ['single_choice', 'multi_choice', 'checkbox', 'dropdown']:
                options = extra.get('options')
                if not isinstance(options, list) or not all(isinstance(x, str) for x in options):
                    raise serializers.ValidationError(
                        {"extra_data": "–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ 'options'."}
                    )

            elif type_question == 'likert':
                scale = extra.get('scale')
                if not isinstance(scale, int) or scale < 2:
                    raise serializers.ValidationError({"extra_data": "–ü–æ–ª–µ 'scale' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚â• 2."})
                if 'min_label' not in extra or 'max_label' not in extra:
                    raise serializers.ValidationError({"extra_data": "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—è 'min_label' –∏ 'max_label'."})

            elif type_question == 'number':
                min_val = extra.get('min')
                max_val = extra.get('max')
                if min_val is not None and not isinstance(min_val, (int, float)):
                    raise serializers.ValidationError({"extra_data": "–ü–æ–ª–µ 'min' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º."})
                if max_val is not None and not isinstance(max_val, (int, float)):
                    raise serializers.ValidationError({"extra_data": "–ü–æ–ª–µ 'max' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º."})

            elif type_question == 'date':
                if 'format' in extra and not isinstance(extra['format'], str):
                    raise serializers.ValidationError({"extra_data": "–ü–æ–ª–µ 'format' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π."})

        except serializers.ValidationError as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            log_validation_error(serializer_name, "extra_data", data, e.detail)
            raise
        except Exception as e:
            log_validation_error(serializer_name, "extra_data", data, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise serializers.ValidationError({"extra_data": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"})

        data['extra_data'] = extra
        return data


# === LINKING ===
class SurveyQuestionLinkSerializer(serializers.ModelSerializer):
    class Meta:
        model = SurveyQuestions
        fields = ['survey_question_id', 'survey', 'question', 'order']
        read_only_fields = ['survey_question_id']


# === RESPONDENT ANSWERS ===
class RespondentAnswerCreateSerializer(serializers.ModelSerializer):
    question_id = serializers.IntegerField(write_only=True)

    class Meta:
        model = RespondentAnswers
        fields = ['answer_id', 'question_id', 'text_answer']
        read_only_fields = ['answer_id']

    def validate(self, data):
        serializer_name = self.__class__.__name__
        try:
            user = self.context['request'].user
            question_id = data.get('question_id')

            # --- –∏—â–µ–º –≤–æ–ø—Ä–æ—Å –∏ —Å–≤—è–∑—å ---
            question = get_object_or_404(Questions, pk=question_id)
            link = SurveyQuestions.objects.filter(question=question).select_related('survey').first()
            if not link:
                raise serializers.ValidationError("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –æ–ø—Ä–æ—Å—É.")

            survey = link.survey
            if not survey.is_active():
                raise serializers.ValidationError("–û–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.")

            # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º extra_data –¥–ª—è —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
            extra = question.extra_data or {}
            if isinstance(extra, str):
                try:
                    extra = json.loads(extra)
                except Exception:
                    extra = {}

            # === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è ===
            text_answer = data.get("text_answer")

            # if question.type_question in ['single_choice', 'multi_choice', 'checkbox', 'dropdown']:
            #     allowed = extra.get('options', [])
            #     if allowed and text_answer not in allowed:
            #         raise serializers.ValidationError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
            #
            # elif question.type_question == 'likert':
            #     divisions = extra.get('scale', 5)
            #     try:
            #         val = int(text_answer)
            #     except (ValueError, TypeError):
            #         raise serializers.ValidationError("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            #     if not (1 <= val <= divisions):
            #         raise serializers.ValidationError("–ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —à–∫–∞–ª—ã.")
            #
            # elif question.type_question == 'number':
            #     try:
            #         val = float(text_answer)
            #     except (ValueError, TypeError):
            #         raise serializers.ValidationError("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            #     min_val = extra.get('min')
            #     max_val = extra.get('max')
            #     if min_val is not None and val < min_val:
            #         raise serializers.ValidationError(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {min_val}.")
            #     if max_val is not None and val > max_val:
            #         raise serializers.ValidationError(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {max_val}.")
            #
            # elif question.type_question == 'date':
            #     # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
            #     pass

            # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–≤—è–∑–∏ ---
            data['survey_question'] = link
            data['respondent'] = user

            return data

        except Exception as e:
            log_validation_error(serializer_name, "text_answer", data, e)
            raise

    def create(self, validated_data):
        user = validated_data['respondent']
        survey_question = validated_data['survey_question']
        text_answer = validated_data.get('text_answer', '')

        # --- –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º ---
        existing = RespondentAnswers.objects.filter(
            survey_question=survey_question,
            respondent=user
        ).first()

        if existing:
            existing.text_answer = text_answer
            existing.save()
            print(f"üîÅ –û–±–Ω–æ–≤–ª—ë–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –≤–æ–ø—Ä–æ—Å {survey_question.question_id}")
            return existing

        # --- –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π ---
        answer = RespondentAnswers.objects.create(
            survey_question=survey_question,
            respondent=user,
            text_answer=text_answer
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –≤–æ–ø—Ä–æ—Å {survey_question.question_id}")
        return answer



class SurveyArchiveSerializer(serializers.ModelSerializer):
    class Meta:
        model = SurveyArchive
        fields = ['archive_id', 'survey', 'archived_at']

class RespondentSurveyStatusSerializer(serializers.ModelSerializer):
    survey_name = serializers.CharField(source='survey.name', read_only=True)

    class Meta:
        model = RespondentSurveyStatus
        fields = ['id', 'survey', 'survey_name', 'status', 'score', 'updated_at']
        read_only_fields = ['id', 'updated_at']

class RespondentAnswerDetailSerializer(serializers.ModelSerializer):
    question_id = serializers.IntegerField(source='survey_question.question.question_id', read_only=True)
    question_text = serializers.CharField(source='survey_question.question.text_question', read_only=True)
    type_question = serializers.CharField(source='survey_question.question.type_question', read_only=True)

    class Meta:
        model = RespondentAnswers
        fields = [
            'answer_id',
            'question_id',
            'question_text',
            'type_question',
            'text_answer',
            'created_at',
        ]

# --- –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –î–õ–Ø –û–ü–†–û–°–ê ---

class SurveyRequiredCharacteristicSerializer(serializers.ModelSerializer):
    characteristic_name = serializers.CharField(source='characteristic.name', read_only=True)

    class Meta:
        model = SurveyRequiredCharacteristics
        fields = ['id', 'survey', 'characteristic', 'characteristic_name', 'requirements']