import unittest
import json
from .AI_generate import (
    generate_questions,
    summarize_text,
    evaluate_reliability,
    detect_anomalies,
    check_question_bias,
    evaluate_answer_quality,
    generate_questions_repeat
)


class AIFunctionsTest(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥—É–ª—è AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""

    def _divider(self, title: str):
        print("\n" + "‚ïê" * 70)
        print(f"üß™ {title}")
        print("‚ïê" * 70)

    def test_generate_questions(self):
        self._divider("–¢–µ—Å—Ç: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ")
        topic = "–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã"
        qs = generate_questions(topic, 3)
        self.assertIsInstance(qs, list)
        print(f"üì• –¢–µ–º–∞: {topic}")
        print(f"üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(qs)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
        for i, q in enumerate(qs, start=1):
            print(f"  {i}. {q}")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")

    def test_generate_questions_repeat(self):
        self._divider("–¢–µ—Å—Ç: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ")
        topic = "–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã"
        qs = generate_questions_repeat(topic, 3)
        self.assertIsInstance(qs, list)
        print(f"üì• –¢–µ–º–∞: {topic}")
        print(f"üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(qs)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
        for i, q in enumerate(qs, start=1):
            print(f"  {i}. {q}")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")

    def test_summarize_text(self):
        self._divider("–¢–µ—Å—Ç: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
        answers = ["–ï–¥–∞ –±—ã–ª–∞ –≤–∫—É—Å–Ω–æ–π", "–î–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è", "–ö—É—Ä—å–µ—Ä –≤–µ–∂–ª–∏–≤"]
        summary = summarize_text(answers)
        self.assertIsInstance(summary, str)
        print(f"üì• –û—Ç–≤–µ—Ç—ã ({len(answers)}): {answers}")
        print(f"üì§ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {summary}")
        print("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

    def test_evaluate_reliability(self):
        self._divider("–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤")
        answers = ["–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–∏—Ü—Ü–∞", "–Ø –∂–∏–≤—É –Ω–∞ –°–æ–ª–Ω—Ü–µ"]
        reliability = evaluate_reliability(answers)
        self.assertIsInstance(reliability, list)
        self.assertTrue(all(isinstance(x, int) for x in reliability))
        print(f"üì• –û—Ç–≤–µ—Ç—ã: {answers}")
        print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏: {reliability}")
        print(f"üß© –ò—Ç–æ–≥: {sum(reliability)} –∏–∑ {len(reliability)} –ø—Ä–∏–∑–Ω–∞–Ω—ã –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º–∏.")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

    def test_detect_anomalies(self):
        self._divider("–¢–µ—Å—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö")
        question = "–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –Ω–∞—à–µ–π –¥–æ—Å—Ç–∞–≤–∫–µ?"
        answers = ["–í—Å–µ —Ö–æ—Ä–æ—à–æ", "–°–æ–ª–Ω—Ü–µ –≥–æ—Ä—è—á–µ–µ", "–ö—É—Ä—å–µ—Ä –≤–µ–∂–ª–∏–≤"]
        anomalies = detect_anomalies(question, answers)
        self.assertIsInstance(anomalies, list)
        print(f"üì• –í–æ–ø—Ä–æ—Å: {question}")
        print(f"üì• –û—Ç–≤–µ—Ç—ã: {answers}")
        print(f"üì§ –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {anomalies}")
        if anomalies:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(anomalies)} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        else:
            print("‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        print("üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

    def test_check_question_bias(self):
        self._divider("–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å")
        questions = ["–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞—à –±—Ä–µ–Ω–¥?", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ?"]
        bias = check_question_bias(questions)
        self.assertIsInstance(bias, list)
        print(f"üì• –í–æ–ø—Ä–æ—Å—ã: {questions}")
        if bias:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥–≤–∑—è—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–∏–Ω–¥–µ–∫—Å—ã): {bias}")
            for idx in bias:
                print(f"   ‚Ä¢ {idx}: {questions[idx]}")
        else:
            print("‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã.")
        print("üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

    def test_evaluate_answer_quality_auto_score(self):
        self._divider("–¢–µ—Å—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ (average_score)")
        questions = ["–ö–∞–∫ –≤–∞–º –¥–æ—Å—Ç–∞–≤–∫–∞?", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å?"]
        answers = ["–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ", "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –±–ª—é–¥–∞"]

        result = evaluate_answer_quality(questions, answers)
        self.assertIn("evaluations", result)
        self.assertIn("overall_score", result)
        self.assertIsInstance(result["overall_score"], float)

        print(f"üì• –í–æ–ø—Ä–æ—Å—ã: {questions}")
        print(f"üì• –û—Ç–≤–µ—Ç—ã: {answers}")
        print("üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É:")
        for i, ev in enumerate(result.get("evaluations", []), start=1):
            print(f"   {i}. –í–æ–ø—Ä–æ—Å: {ev.get('question')}")
            print(f"      –û—Ç–≤–µ—Ç: {ev.get('answer')}")
            print(f"      –û—Ü–µ–Ω–∫–∞: {ev.get('score')}")
            if ev.get("issues"):
                print(f"      ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {ev.get('issues')}")
        print(f"\nüßÆ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –∫–∞—á–µ—Å—Ç–≤–∞ (overall_score): {result['overall_score']}")
        print("‚úÖ –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")

    def test_full_example_scenario(self):
        self._divider("–¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è (__main__)")
        qs = generate_questions("–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", 2)
        summary = summarize_text(["–ë—ã—Å—Ç—Ä–æ", "–£–¥–æ–±–Ω–æ"])
        reliability = evaluate_reliability(["–õ—é–±–ª—é –µ–¥—É", "–Ø —Ä–æ–±–æ—Ç"])
        anomalies = detect_anomalies("–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?", ["–í—Å–µ", "–ö–æ—à–∫–∏ –ª–µ—Ç–∞—é—Ç"])
        bias = check_question_bias(["–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞—Å?", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å?"])

        self.assertTrue(isinstance(qs, list))
        self.assertTrue(isinstance(summary, str))
        self.assertTrue(isinstance(reliability, list))
        self.assertTrue(isinstance(anomalies, list))
        self.assertTrue(isinstance(bias, list))

        print(f"üìä –í–æ–ø—Ä–æ—Å—ã ({len(qs)}): {qs}")
        print(f"üìÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {summary}")
        print(f"üß† –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {reliability}")
        print(f"üö® –ê–Ω–æ–º–∞–ª–∏–∏: {anomalies}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥–≤–∑—è—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {bias}")
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ.")

if __name__ == "__main__":
    unittest.main(verbosity=2)
