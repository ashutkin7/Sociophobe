from openai import OpenAI
import google.generativeai as oldgenai
from .genai_api import api_key as genai_api_key
import json
import random

PROXY_URL = "https://gemini-proxy.ashutkin.workers.dev/v1"
API_KEY = genai_api_key

# ===============================
# –ö–õ–ò–ï–ù–¢
# ===============================
client = OpenAI(
    api_key=API_KEY,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á –∑–¥–µ—Å—å
    base_url=PROXY_URL
)

# ===============================
# –§–£–ù–ö–¶–ò–ò
# ===============================

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    try:
        models = client.models.list()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model in models.data:
            print(f"- {model.id}")
        return models.data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def generate_response(model_name: str, prompt: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    :param model_name: –ò–º—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'gemini-pro')
    :param prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    :return: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    """
    try:
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return ""


def _process_json_response(json_string: str, key: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON –æ—Ç–≤–µ—Ç–∞ LLM.
    :param json_string: JSON-—Å—Ç—Ä–æ–∫–∞ –æ—Ç LLM
    :param key: –∫–ª—é—á –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "questions", "summary", ...)
    :return: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–∞ –ª–∏–±–æ None/[].
    """
    text = json_string.strip()
    if text.startswith("```json"):
        text = text[len("```json"):].strip()
        if text.endswith("```"):
            text = text[:-3].strip()

    try:
        data = json.loads(text)
        if key in data:
            return data[key]
        else:
            print(f"–û—à–∏–±–∫–∞: –∫–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM.")
            return [] if isinstance(data, dict) else None
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}\n–û—Ç–≤–µ—Ç LLM: {text}")
        return [] if key == "questions" else None

# ----------------------------------------------------
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ó–õ–ò–ß–ù–´–• AI-–ó–ê–î–ê–ß
# ----------------------------------------------------

MODEL_NAMES = ['gemini-2.5-flash','gemini-2.5-flash-lite','gemini-2.0-flash-lite']


def generate_questions(topic: str, n: int = 10) -> list:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    prompt = (
        f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Å–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤.\n"
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {n} –û–¢–ö–†–´–¢–´–• –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ: ¬´{topic}¬ª.\n"
        f"–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω:\n"
        f"  ‚Ä¢ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç,\n"
        f"  ‚Ä¢ –∏–∑–±–µ–≥–∞—Ç—å –Ω–∞–≤–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫,\n"
        f"  ‚Ä¢ –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º —Ç–µ–º–µ.\n"
        f"–í–µ—Ä–Ω–∏ –≤ –ß–ò–°–¢–û–ú JSON:\n"
        f'{{"questions": ["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", ...]}}'
    )
    response = generate_response(MODEL_NAMES, prompt)
    return _process_json_response(response, "questions")


def generate_questions_repeat(topic: str, n: int = 10) -> list:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –æ–¥–∏–Ω —Å–º—ã—Å–ª).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    prompt = (
        f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Å–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤.\n"
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {n} –ø–∞—Ä –û–¢–ö–†–´–¢–´–• –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ: ¬´{topic}¬ª.\n"
        f"–ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –û–î–ò–ù–ê–ö–û–í–´–ú —Å–º—ã—Å–ª–æ–º, "
        f"–Ω–æ —Å —Ä–∞–∑–Ω–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π.\n"
        f"–ò–∑–±–µ–≥–∞–π –Ω–∞–≤–æ–¥—è—â–∏—Ö –∏ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑.\n"
        f"–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ß–ò–°–¢–û–ú JSON:\n"
        f'{{"questions": [{{"pair": ["–≤–æ–ø—Ä–æ—Å_1", "–≤–æ–ø—Ä–æ—Å_2"]}}, ...]}}'
    )

    response = generate_response(MODEL_NAMES, prompt)
    pairs = _process_json_response(response, "questions")

    if not pairs:
        return []

    # ‚úÖ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    all_questions = [q for pair in pairs for q in pair.get("pair", [])]
    random.shuffle(all_questions)
    return all_questions

def evaluate_answer_quality(questions: list, answers: list) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
    {
        "evaluations": [{"question": str, "answer": str, "score": float, "issues": [str]}],
        "overall_score": float
    }
    """
    questions_text = json.dumps(questions, ensure_ascii=False)
    answers_text = json.dumps(answers, ensure_ascii=False)

    prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤.\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–∞–º, –∏—Ö –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è.\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∏:\n"
        "- —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å (0‚Äì1),\n"
        "- —É–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å).\n"
        "–¢–∞–∫–∂–µ –≤—ã—á–∏—Å–ª–∏ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ (overall_score) ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º.\n"
        "–í–µ—Ä–Ω–∏ –≤ –ß–ò–°–¢–û–ú JSON –≤–∏–¥–µ:\n"
        "{\n"
        '  "evaluations": [\n'
        '    {"question": "<—Ç–µ–∫—Å—Ç>", "answer": "<—Ç–µ–∫—Å—Ç>", "score": 0.0‚Äì1.0, "issues": ["—Å—Ç—Ä–æ–∫–∞1", "—Å—Ç—Ä–æ–∫–∞2"]}, ...\n'
        '  ],\n'
        '  "overall_score": 0.0‚Äì1.0\n'
        "}"
        f"\n\n–í–æ–ø—Ä–æ—Å—ã: {questions_text}\n–û—Ç–≤–µ—Ç—ã: {answers_text}"
    )

    try:
        response = client.chat.completions.create(
            model=random.choice(MODEL_NAMES),
            messages=[{"role": "user", "content": prompt}]
        )
        raw = response.choices[0].message.content.strip()
        raw = raw.replace("```json", "").replace("```", "").strip()
        data = json.loads(raw)

        # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç average_score, –µ—Å–ª–∏ –Ω–µ—Ç overall_score
        scores = [e.get("score", 0) for e in data.get("evaluations", [])]
        if not scores:
            print("‚ö†Ô∏è –ù–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è 0.0")
            avg = 0.0
        else:
            avg = round(sum(scores) / len(scores), 3)

        if "overall_score" not in data or data.get("overall_score") is None:
            print(f"‚ÑπÔ∏è overall_score –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –≤—Ä—É—á–Ω—É—é: {avg}")
            data["overall_score"] = avg
        else:
            print(f"‚úÖ overall_score –∏–∑ LLM: {data['overall_score']}")

        print(f"üßæ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—á—ë—Ç (average_score): {avg}")
        return data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return {"evaluations": [], "overall_score": 0.0}

def summarize_text(answers: list) -> str:
    """
    –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç—Ä–∞–∂–∞—é—â–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤.
    """
    answers_text = json.dumps(answers, ensure_ascii=False)
    prompt = (
        "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤.\n"
        "–°–æ—Å—Ç–∞–≤—å –û–î–ò–ù –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ–±—â–µ–µ –º–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞.\n"
        "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ß–ò–°–¢–û–ú JSON:\n"
        '{"summary": "<–æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ>"}\n'
        f"–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤: {answers_text}"
    )
    response = generate_response(MODEL_NAMES, prompt)
    return _process_json_response(response, "summary")


def evaluate_reliability(answers: list) -> list:
    """
    –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 0 –∏ 1 (0 ‚Äî —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, 1 ‚Äî –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π).
    """
    answers_text = json.dumps(answers, ensure_ascii=False)
    prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ü–µ–Ω–∏: 1 ‚Äî –æ—Ç–≤–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º, 0 ‚Äî –æ—Ç–≤–µ—Ç —Å–æ–º–Ω–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —è–≤–Ω–æ –ª–æ–∂–Ω—ã–π.\n"
        "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ß–ò–°–¢–û–ú JSON —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        '{"reliability": [0 –∏–ª–∏ 1 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ]}\n'
        f"–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤: {answers_text}"
    )
    response = generate_response(MODEL_NAMES, prompt)
    return _process_json_response(response, "reliability")


def detect_anomalies(question: str, answers: list) -> list:
    """
    –í—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∏–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º —Å–∞–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    """
    answers_text = json.dumps(answers, ensure_ascii=False)
    prompt = (
        "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.\n"
        "–î–∞–Ω –≤–æ–ø—Ä–æ—Å –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–ù–∞–π–¥–∏ –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ —Ç–æ—á–Ω–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ.\n"
        "–í–µ—Ä–Ω–∏ –∏–Ω–¥–µ–∫—Å—ã —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ß–ò–°–¢–û–ú JSON:\n"
        '{"anomalies": [—Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤]}\n'
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤: {answers_text}"
    )
    response = generate_response(MODEL_NAMES, prompt)
    return _process_json_response(response, "anomalies")


def check_question_bias(questions: list) -> list:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫,
    —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–≤–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω–æ-–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
    –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã¬ª, ¬´–∑–Ω–∞–∫–æ–º –ª–∏ –≤–∞–º¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.
    """
    questions_text = json.dumps(questions, ensure_ascii=False)
    prompt = (
        "–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–∏–∑–∞–π–Ω—É –∞–Ω–∫–µ—Ç.\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–∫–∞–∂–∏ –∏–Ω–¥–µ–∫—Å—ã —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ "
        "–¥–∞–≤–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω–æ-–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—Ä–∞–∑—ã ¬´–∑–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã¬ª, ¬´–∑–Ω–∞–∫–æ–º –ª–∏ –≤–∞–º¬ª) "
        "–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞.\n"
        "–í–µ—Ä–Ω–∏ –≤ –ß–ò–°–¢–û–ú JSON —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        '{"biased_questions": [—Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ç–∞–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤]}\n'
        f"–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_text}"
    )
    response = generate_response(MODEL_NAMES, prompt)
    return _process_json_response(response, "biased_questions")


# ------------------------------
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    qs = generate_questions("–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", 5)
    print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", qs)

    # 2. –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    answers_example = ["–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.", "–•–æ—á—É –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã."]
    summary = summarize_text(answers_example)
    print("–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", summary)

    # 3. –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    reliability = evaluate_reliability(["–Ø –ª–µ—Ç–∞—é –Ω–∞ –ú–∞—Ä—Å", "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–∏—Ü—Ü–∞"])
    print("–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (0/1):", reliability)

    # 4. –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π (—Å –≤–æ–ø—Ä–æ—Å–æ–º)
    anomalies = detect_anomalies("–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –Ω–∞—à–µ–π –¥–æ—Å—Ç–∞–≤–∫–µ?", answers_example)
    print("–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:", anomalies)

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å
    bias = check_question_bias(["–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å?", "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ —Ä–∞–±–æ—Ç–µ?"])
    print("–í–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:", bias)
