# payments/views.py
from decimal import Decimal
from django.db import transaction
from django.db.models import Q
from django.shortcuts import get_object_or_404
from django.utils import timezone
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status, permissions
from drf_spectacular.utils import extend_schema, inline_serializer, OpenApiResponse
from .serializers import (
    TopUpSerializer, WithdrawSerializer, PayoutSerializer,
    WalletSerializer, TransactionSerializer
)
from .models import Wallet, PaymentTransaction
from surveys.models import Surveys, RespondentSurveyStatus
from django.contrib.auth import get_user_model
from rest_framework import serializers

User = get_user_model()


# -----------------------------
# –ü–æ–º–æ—â–Ω–∏–∫: –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫
# -----------------------------
def get_or_create_wallet(user):
    wallet, _ = Wallet.objects.get_or_create(user=user, defaults={'balance': Decimal('0.00')})
    return wallet


# -----------------------------
# 1) –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (Top-up)
# POST /api/payments/top-up/
# -----------------------------
class TopUpView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (customer)",
        description=(
            "–°–æ–∑–¥–∞—ë—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–∫–∞–∑—á–∏–∫–∞).\n\n"
            "–ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CloudPayments:\n"
            "- `payment_token` ‚Äî —Ç–æ–∫–µ–Ω/–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞–º–º–∞ –∫–∞—Ä—Ç—ã/–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞;\n"
            "- `return_url` ‚Äî callback/redirect URL –ø–æ—Å–ª–µ 3DS;\n"
            "- `metadata` ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
            "–õ–æ–≥–∏–∫–∞: —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å PaymentTransaction —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `pending`. "
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ–º–µ—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é `success` –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫."
        ),
        request=TopUpSerializer,
        responses={
            200: inline_serializer(
                name='TopUpResponse',
                fields={
                    'transaction_id': serializers.IntegerField(),
                    'status': serializers.CharField(),
                    'balance': serializers.DecimalField(max_digits=12, decimal_places=2)
                }
            )
        },
        tags=['–ü–ª–∞—Ç–µ–∂–∏']
    )
    def post(self, request):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        serializer = TopUpSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        data = serializer.validated_data

        user = request.user
        amount = Decimal(data['amount'])
        currency = data.get('currency', 'RUB')
        description = data.get('description', '')

        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ
        tx = PaymentTransaction.objects.create(
            user=user,
            type='topup',
            status='pending',
            amount=amount,
            currency=currency,
            description=description,
            gateway_data={'request': {k: v for k, v in data.items() if k in ('payment_token','metadata','return_url')}}
        )

        # NOTE: –∑–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CloudPayments:
        #  - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º payment_token –Ω–∞ CloudPayments, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç,
        #  - –µ—Å–ª–∏ success => tx.mark_success(gateway_data=resp), wallet.deposit(...)
        #  - –µ—Å–ª–∏ pending (3ds) => –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç—É
        #
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
        try:
            with transaction.atomic():
                wallet = get_or_create_wallet(user)
                wallet.deposit(amount)
                tx.mark_success(gateway_data={'simulated': True, 'received_at': timezone.now().isoformat()})
        except Exception as e:
            tx.mark_failed(gateway_data={'error': str(e)})
            return Response({'detail': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', 'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        return Response({
            'transaction_id': tx.transaction_id,
            'status': tx.status,
            'balance': str(wallet.balance)
        }, status=status.HTTP_200_OK)


# -----------------------------
# 2) –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (Withdraw)
# POST /api/payments/withdraw/
# -----------------------------
class WithdrawView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="–ó–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤",
        description=(
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∫–æ—à–µ–ª—å–∫–∞ (customer –∏–ª–∏ respondent).\n"
            "–ü–æ–ª—è:\n"
            "- amount: —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞\n"
            "- destination: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)\n\n"
            "–õ–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é withdraw —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `pending`.\n"
            "–í —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ø–ª–∞—Ç—ë–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.\n"
        ),
        request=WithdrawSerializer,
        responses={200: TransactionSerializer},
        tags=['–ü–ª–∞—Ç–µ–∂–∏']
    )
    def post(self, request):
        serializer = WithdrawSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        data = serializer.validated_data

        user = request.user
        amount = Decimal(data['amount'])
        destination = data['destination']
        description = data.get('description', '')

        wallet = get_or_create_wallet(user)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if wallet.balance < amount:
            return Response({'detail': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'}, status=status.HTTP_400_BAD_REQUEST)

        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ pending (—Ä–µ–∞–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
        tx = PaymentTransaction.objects.create(
            user=user,
            type='withdraw',
            status='pending',
            amount=amount,
            currency=wallet.currency,
            description=description,
            gateway_data={'destination': destination}
        )

        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º (–≤ —Ä–µ–∞–ª—å–Ω–æ–º ‚Äî –∂–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
        try:
            with transaction.atomic():
                wallet.withdraw(amount)
                tx.mark_success(gateway_data={'simulated': True, 'sent_to': destination, 'processed_at': timezone.now().isoformat()})
        except Exception as e:
            tx.mark_failed(gateway_data={'error': str(e)})
            return Response({'detail': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞', 'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        return Response(TransactionSerializer(tx).data, status=status.HTTP_200_OK)


# -----------------------------
# 3) Payout: –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
# POST /api/payments/payout/
# -----------------------------
class PayoutView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É –∑–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –æ–ø—Ä–æ—Å",
        description=(
            "–í—ã–ø–ª–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è **—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º** –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ü—Ä–æ–≤–µ—Ä–∫–∏:\n"
            "- –û–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ `cost`\n"
            "- –†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å `completed`\n"
            "- –£ –∑–∞–∫–∞–∑—á–∏–∫–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–ø—Ä–æ—Å–∞) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
            "- –í—ã–ø–ª–∞—Ç–∞ –ø–æ –æ–¥–Ω–æ–π –ø–∞—Ä–µ (survey_id, respondent_id) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"
        ),
        request=PayoutSerializer,
        responses={
            200: OpenApiResponse(
                response=inline_serializer(
                    name="PayoutResponse",
                    fields={
                        "transaction_id": serializers.IntegerField(),
                        "status": serializers.CharField(),
                        "amount": serializers.DecimalField(max_digits=12, decimal_places=2),
                        "from_balance": serializers.DecimalField(max_digits=12, decimal_places=2),
                        "to_balance": serializers.DecimalField(max_digits=12, decimal_places=2),
                    },
                )
            )
        },
        tags=["–ü–ª–∞—Ç–µ–∂–∏"],
    )
    def post(self, request):
        """üí∏ –í—ã–ø–ª–∞—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        serializer = PayoutSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        survey_id = serializer.validated_data["survey_id"]
        description = serializer.validated_data.get("description", "")

        respondent = request.user  # –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä ‚Äî —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ä–æ—Å
        survey = get_object_or_404(Surveys, pk=survey_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç
        if getattr(respondent, "role", None) != "respondent":
            return Response(
                {"detail": "–¢–æ–ª—å–∫–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã"},
                status=status.HTTP_403_FORBIDDEN,
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º
        try:
            rs = RespondentSurveyStatus.objects.get(survey=survey, respondent=respondent)
        except RespondentSurveyStatus.DoesNotExist:
            return Response(
                {"detail": "–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ"},
                status=status.HTTP_404_NOT_FOUND,
            )

        if rs.status != "completed":
            return Response(
                {"detail": "–û–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω –ø–µ—Ä–µ–¥ –≤—ã–ø–ª–∞—Ç–æ–π"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
        if survey.cost is None or survey.cost <= Decimal("0.00"):
            return Response(
                {"detail": "–î–ª—è –æ–ø—Ä–æ—Å–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã (cost)"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≤—ã–ø–ª–∞—Ç—É
        already = PaymentTransaction.objects.filter(
            type="payout",
            related_survey_id=survey_id,
            related_respondent_id=respondent.id,
            status="success",
        ).exists()
        if already:
            return Response(
                {"detail": "–í—ã–ø–ª–∞—Ç–∞ –∑–∞ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∑–∞–∫–∞–∑—á–∏–∫–∞ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏
        customer = survey.creator
        wallet_customer = get_or_create_wallet(customer)
        if wallet_customer.balance < survey.cost:
            return Response(
                {"detail": "–£ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ (–∞—Ç–æ–º–∞—Ä–Ω–æ)
        wallet_respondent = get_or_create_wallet(respondent)
        with transaction.atomic():
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx = PaymentTransaction.objects.create(
                user=respondent,
                type="payout",
                amount=survey.cost,
                currency=wallet_customer.currency,
                description=description or f"–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –æ–ø—Ä–æ—Å '{survey.name}'",
                related_survey_id=survey_id,
                related_respondent_id=respondent.id,
            )

            # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
            wallet_customer.withdraw(survey.cost)
            wallet_respondent.deposit(survey.cost)

            tx.mark_success(
                gateway_data={
                    "from_customer": customer.email,
                    "to_respondent": respondent.email,
                    "transferred_at": timezone.now().isoformat(),
                }
            )

        return Response(
            {
                "transaction_id": tx.transaction_id,
                "status": tx.status,
                "amount": str(tx.amount),
                "from_balance": str(wallet_customer.balance),
                "to_balance": str(wallet_respondent.balance),
            },
            status=status.HTTP_200_OK,
        )

# -----------------------------
# 4) –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
# GET /api/payments/wallet/  -> –±–∞–ª–∞–Ω—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# GET /api/payments/transactions/ -> —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------------
class WalletView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—à–µ–ª—å–∫–∞ (–±–∞–ª–∞–Ω—Å) —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        responses={200: WalletSerializer},
        tags=['–ü–ª–∞—Ç–µ–∂–∏']
    )
    def get(self, request):
        wallet = get_or_create_wallet(request.user)
        return Response({'balance': str(wallet.balance), 'currency': wallet.currency})


class TransactionsListView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞)",
        description=(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
            "- –î–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞: —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "- –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞: –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –µ–≥–æ –æ–ø—Ä–æ—Å–∞–º–∏ (–≤—ã–ø–ª–∞—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞–º –∏ –¥—Ä.)"
        ),
        responses={200: TransactionSerializer(many=True)},
        tags=['–ü–ª–∞—Ç–µ–∂–∏']
    )
    def get(self, request):
        user = request.user

        # üîπ –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä ‚Äî –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        qs = PaymentTransaction.objects.filter(user=user)

        # üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∑–∞–∫–∞–∑—á–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –µ–≥–æ –æ–ø—Ä–æ—Å–∞–º
        if getattr(user, 'role', None) == 'customer':
            from surveys.models import Surveys
            survey_ids = Surveys.objects.filter(creator=user).values_list('survey_id', flat=True)
            if survey_ids:
                qs = PaymentTransaction.objects.filter(
                    Q(user=user) | Q(related_survey_id__in=survey_ids)
                )

        qs = qs.order_by('-created_at')

        return Response(TransactionSerializer(qs, many=True).data)