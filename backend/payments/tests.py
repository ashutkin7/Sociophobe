from decimal import Decimal
from django.urls import reverse
from django.utils import timezone
from rest_framework import status
from rest_framework.test import APITestCase, APIClient
from django.contrib.auth import get_user_model

from surveys.models import Surveys, RespondentSurveyStatus
from payments.models import Wallet, Payment, PaymentTransaction

User = get_user_model()


class PaymentsFullTestCase(APITestCase):
    """
    –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è payments:
    - Wallet (deposit, withdraw)
    - Payment (—Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç)
    - PaymentTransaction (–ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
    """

    def setUp(self):
        # üîπ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.customer = User.objects.create_user(
            email="customer@test.com", password="12345", role="customer", name="Customer"
        )
        self.respondent = User.objects.create_user(
            email="respondent@test.com", password="12345", role="respondent", name="Respondent"
        )

        # üîπ –°–æ–∑–¥–∞—ë–º –∫–æ—à–µ–ª—å–∫–∏
        self.customer_wallet = Wallet.objects.create(user=self.customer, balance=Decimal("1000.00"))
        self.respondent_wallet = Wallet.objects.create(user=self.respondent, balance=Decimal("100.00"))

        # üîπ –°–æ–∑–¥–∞—ë–º –æ–ø—Ä–æ—Å
        self.survey = Surveys.objects.create(
            name="Test Survey",
            creator=self.customer,
            cost=Decimal("200.00"),
            status="active",
        )

        # üîπ –†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å
        self.status_completed = RespondentSurveyStatus.objects.create(
            respondent=self.respondent,
            survey=self.survey,
            status="completed",
        )

        self.client = APIClient()

    # ===========================================================
    # ‚úÖ WALLET TESTS
    # ===========================================================

    def test_wallet_deposit_success(self):
        """‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        before = self.customer_wallet.balance
        self.customer_wallet.deposit(Decimal("500.00"))
        self.customer_wallet.refresh_from_db()
        self.assertEqual(self.customer_wallet.balance, before + Decimal("500.00"))

    def test_wallet_withdraw_success(self):
        """‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤"""
        before = self.customer_wallet.balance
        self.customer_wallet.withdraw(Decimal("200.00"))
        self.customer_wallet.refresh_from_db()
        self.assertEqual(self.customer_wallet.balance, before - Decimal("200.00"))

    def test_wallet_withdraw_insufficient(self):
        """‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ"""
        with self.assertRaises(ValueError):
            self.respondent_wallet.withdraw(Decimal("9999.00"))

    # ===========================================================
    # ‚úÖ PAYMENT CREATION TESTS
    # ===========================================================

    def test_create_payment_success(self):
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        payment = Payment.objects.create(
            survey=self.survey,
            creator=self.customer,
            respondent=self.respondent,
            amount=Decimal("200.00"),
        )
        payment.mark_succeeded(transaction_id="TXN123")
        payment.refresh_from_db()
        self.assertEqual(payment.status, "succeeded")
        self.assertIsNotNone(payment.paid_at)
        self.assertEqual(payment.transaction_id, "TXN123")

    def test_create_payment_failed(self):
        """‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–º–µ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        payment = Payment.objects.create(
            survey=self.survey,
            creator=self.customer,
            respondent=self.respondent,
            amount=Decimal("200.00"),
        )
        payment.mark_failed("–û—à–∏–±–∫–∞ —à–ª—é–∑–∞")
        payment.refresh_from_db()
        self.assertEqual(payment.status, "failed")
        self.assertIn("–û—à–∏–±–∫–∞", payment.description)

    def test_payment_str(self):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        payment = Payment.objects.create(
            survey=self.survey,
            creator=self.customer,
            respondent=self.respondent,
            amount=Decimal("150.00"),
        )
        text = str(payment)
        self.assertIn(self.survey.name, text)
        self.assertIn(self.respondent.email, text)
        self.assertIn("150.00", text)

    # ===============================
    # ‚úÖ PAYOUT TESTS (respondent-initiated)
    # ===============================

    from django.urls import reverse

    class RespondentPayoutTests(APITestCase):
        def setUp(self):
            self.customer = User.objects.create_user(
                email="customer@test.com", password="12345", role="customer", name="Customer"
            )
            self.respondent = User.objects.create_user(
                email="respondent@test.com", password="12345", role="respondent", name="Respondent"
            )

            self.customer_wallet = Wallet.objects.create(user=self.customer, balance=Decimal("500.00"))
            self.respondent_wallet = Wallet.objects.create(user=self.respondent, balance=Decimal("50.00"))

            self.survey = Surveys.objects.create(
                name="Paid Survey",
                creator=self.customer,
                cost=Decimal("200.00"),
                status="active",
            )

            self.status_completed = RespondentSurveyStatus.objects.create(
                respondent=self.respondent,
                survey=self.survey,
                status="completed",
            )

            self.client = APIClient()
            self.url = reverse(
                "payout")  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—É—Ç—å –≤ urls.py: path('payments/payout/', PayoutView.as_view(), name='payout')

        def test_payout_success(self):
            """‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
            self.client.force_authenticate(user=self.respondent)
            data = {"survey_id": self.survey.pk, "description": "–•–æ—á—É –≤—ã–ø–ª–∞—Ç—É"}
            response = self.client.post(self.url, data, format="json")
            self.assertEqual(response.status_code, 200)
            self.assertEqual(response.data["status"], "success")

        def test_payout_denied_for_incomplete(self):
            """‚ùå –í—ã–ø–ª–∞—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –µ—Å–ª–∏ –æ–ø—Ä–æ—Å –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω"""
            self.status_completed.status = "incomplete"
            self.status_completed.save()
            self.client.force_authenticate(user=self.respondent)
            response = self.client.post(self.url, {"survey_id": self.survey.pk}, format="json")
            self.assertEqual(response.status_code, 400)
            self.assertIn("–û–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω", response.data["detail"])

        def test_payout_double_prevention(self):
            """‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞"""
            self.client.force_authenticate(user=self.respondent)
            self.client.post(self.url, {"survey_id": self.survey.pk}, format="json")
            response2 = self.client.post(self.url, {"survey_id": self.survey.pk}, format="json")
            self.assertEqual(response2.status_code, 400)
            self.assertIn("–í—ã–ø–ª–∞—Ç–∞ –∑–∞ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª–∞", response2.data["detail"])

        def test_payout_insufficient_customer_balance(self):
            """‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
            self.customer_wallet.balance = Decimal("50.00")
            self.customer_wallet.save()
            self.client.force_authenticate(user=self.respondent)
            response = self.client.post(self.url, {"survey_id": self.survey.pk}, format="json")
            self.assertEqual(response.status_code, 400)
            self.assertIn("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", response.data["detail"])

        def test_payout_denied_for_nonrespondent(self):
            """‚ùå –¢–æ–ª—å–∫–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É"""
            self.client.force_authenticate(user=self.customer)
            response = self.client.post(self.url, {"survey_id": self.survey.pk}, format="json")
            self.assertEqual(response.status_code, 403)
            self.assertIn("–¢–æ–ª—å–∫–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã", response.data["detail"])

    # ===========================================================
    # ‚úÖ PSEUDO ENDPOINTS / BUSINESS LOGIC SIMULATION
    # ===========================================================

    def test_customer_payout_flow_success(self):
        """‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É"""
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        start_customer = self.customer_wallet.balance
        start_respondent = self.respondent_wallet.balance

        # 2. –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
        payment = Payment.objects.create(
            survey=self.survey,
            creator=self.customer,
            respondent=self.respondent,
            amount=self.survey.cost,
        )

        # 3. –°–ø–∏—Å—ã–≤–∞–µ–º —É –∑–∞–∫–∞–∑—á–∏–∫–∞
        self.customer_wallet.withdraw(payment.amount)

        # 4. –ó–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É
        self.respondent_wallet.deposit(payment.amount)

        # 5. –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç—ë–∂ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
        payment.mark_succeeded(transaction_id="TXN_PAYOUT_1")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏:
        self.customer_wallet.refresh_from_db()
        self.respondent_wallet.refresh_from_db()
        payment.refresh_from_db()

        self.assertEqual(payment.status, "succeeded")
        self.assertEqual(self.customer_wallet.balance, start_customer - payment.amount)
        self.assertEqual(self.respondent_wallet.balance, start_respondent + payment.amount)

    def test_payout_insufficient_customer_funds(self):
        """‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
        self.customer_wallet.balance = Decimal("50.00")
        self.customer_wallet.save()
        with self.assertRaises(ValueError):
            self.customer_wallet.withdraw(Decimal("200.00"))

    def test_double_payout_prevention(self):
        """‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–≤–æ–π–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –æ–¥–Ω–æ–º—É —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É –∑–∞ –æ–¥–∏–Ω –æ–ø—Ä–æ—Å"""
        Payment.objects.create(
            survey=self.survey,
            creator=self.customer,
            respondent=self.respondent,
            amount=Decimal("200.00"),
            status="succeeded"
        )
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω ‚Äî –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏
        with self.assertRaises(Exception):
            Payment.objects.create(
                survey=self.survey,
                creator=self.customer,
                respondent=self.respondent,
                amount=Decimal("200.00"),
                status="pending"
            )

    def test_payout_wrong_survey_status(self):
        """‚ùå –í—ã–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –µ—Å–ª–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å"""
        RespondentSurveyStatus.objects.filter(respondent=self.respondent, survey=self.survey).delete()
        incomplete_status = RespondentSurveyStatus.objects.create(
            respondent=self.respondent,
            survey=self.survey,
            status="incomplete",
        )
        self.assertEqual(incomplete_status.status, "incomplete")

    def test_wallet_concurrent_update_safety(self):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ deposit/withdraw"""
        self.customer_wallet.deposit(Decimal("100.00"))
        self.customer_wallet.withdraw(Decimal("50.00"))
        self.customer_wallet.refresh_from_db()
        self.assertGreater(self.customer_wallet.balance, Decimal("0.00"))

    # ===========================================================
    # ‚úÖ EDGE CASES
    # ===========================================================

    def test_zero_amount_payment_not_allowed(self):
        """‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–ª–µ–≤–æ–π —Å—É–º–º–µ"""
        with self.assertRaises(Exception):
            Payment.objects.create(
                survey=self.survey,
                creator=self.customer,
                respondent=self.respondent,
                amount=Decimal("0.00"),
            )

    def test_negative_amount_transaction(self):
        """‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        with self.assertRaises(Exception):
            PaymentTransaction.objects.create(
                user=self.customer,
                type="withdraw",
                amount=Decimal("-100.00")
            )

    def test_currency_field_default(self):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB"""
        wallet = Wallet.objects.create(user=User.objects.create_user(email="new@test.com", password="123"), balance=Decimal("10.00"))
        self.assertEqual(wallet.currency, "RUB")
