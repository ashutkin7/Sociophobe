from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.dispatch import receiver
from django.db.models.signals import post_migrate

class UsersManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å is_staff=True')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å is_superuser=True')
        return self.create_user(email, password, **extra_fields)

    def get_by_natural_key(self, email):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ email"""
        return self.get(email=email)


class Users(AbstractBaseUser, PermissionsMixin):
    user_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    role = models.CharField(
        max_length=100,
        choices=[
            ('respondent', 'Respondent'),
            ('customer', 'Customer'),
            ('moderator', 'Moderator')
        ]
    )

    # —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
    is_profile_complete = models.BooleanField(
        default=False,
        help_text="–û—Ç–º–µ—á–∞–µ—Ç, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"
    )

    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name', 'role']

    objects = UsersManager()

    @property
    def id(self):
        return self.user_id

    class Meta:
        db_table = 'users'

    def __str__(self):
        return f"{self.email} ({self.role})"


class Characteristics(models.Model):
    TYPE_CHOICES = [
        ('numeric', '–ß–∏—Å–ª–æ–≤–æ–π'),
        ('string', '–°—Ç—Ä–æ–∫–æ–≤—ã–π'),
        ('choice', '–í—ã–±–æ—Ä'),
    ]

    characteristic_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255, unique=True)
    value_type = models.CharField(max_length=20, choices=TYPE_CHOICES)
    requirements = models.TextField(blank=True, null=True)

    class Meta:
        db_table = 'characteristics'


class CharacteristicValues(models.Model):
    characteristic_value_id = models.AutoField(primary_key=True)
    characteristic = models.ForeignKey(Characteristics, on_delete=models.CASCADE)
    value_text = models.CharField(max_length=255)

    class Meta:
        db_table = 'characteristic_values'


class RespondentCharacteristics(models.Model):
    user = models.ForeignKey(Users, on_delete=models.CASCADE)
    characteristic_value = models.ForeignKey(CharacteristicValues, on_delete=models.CASCADE)

    # ‚úÖ –ù–æ–≤–æ–µ –ø–æ–ª–µ (–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
    score = models.FloatField(
        null=True,
        blank=True,
        help_text="–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ (–æ—Ç 0 –¥–æ 1)"
    )

    class Meta:
        db_table = 'respondent_characteristics'
        unique_together = (('user', 'characteristic_value'),)

    def clean(self):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0‚Äì1
        if self.score is not None and not (0.0 <= self.score <= 1.0):
            from django.core.exceptions import ValidationError
            raise ValidationError("–ü–æ–ª–µ 'score' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1")

    def __str__(self):
        return f"{self.user.email} ‚Üí {self.characteristic_value} ({self.score})"

# ============================================================
# üîπ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
# ============================================================
@receiver(post_migrate)
def create_default_characteristics(sender, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ë–î.
    –§–æ—Ä–º–∞—Ç requirements:
      - –¥–ª—è choice: –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
      - –¥–ª—è numeric: –º–∏–Ω–∏–º—É–º,–º–∞–∫—Å–∏–º—É–º
    """
    if sender.name not in ['accounts', 'analytics']:
        return

    defaults = [
        {
            "name": "–í–æ–∑—Ä–∞—Å—Ç",
            "value_type": "numeric",
            "requirements": "10,100",  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        },
        {
            "name": "–ü–æ–ª",
            "value_type": "choice",
            "requirements": "–ú—É–∂—Å–∫–æ–π,–ñ–µ–Ω—Å–∫–∏–π,–î—Ä—É–≥–æ–µ",  # –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
        },
        {
            "name": "–ì–æ—Ä–æ–¥",
            "value_type": "string",
            "requirements": "",  # —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
        },
        {
            "name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "value_type": "choice",
            "requirements": "–°—Ä–µ–¥–Ω–µ–µ,–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ,–í—ã—Å—à–µ–µ,–ú–∞–≥–∏—Å—Ç—Ä,–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫,–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫",
        },
        {
            "name": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è",
            "value_type": "string",
            "requirements": "",
        },
        {
            "name": "–î–æ—Ö–æ–¥",
            "value_type": "numeric",
            "requirements": "0,1000000",  # –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö
        },
        {
            "name": "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            "value_type": "choice",
            "requirements": "–•–æ–ª–æ—Å—Ç,–ñ–µ–Ω–∞—Ç,–†–∞–∑–≤–µ–¥—ë–Ω,–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
        },
        {
            "name": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
            "value_type": "numeric",
            "requirements": "0,50",  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –æ–ø—ã—Ç–∞
        },
        {
            "name": "–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω—å—é",
            "value_type": "numeric",
            "requirements": "1,10",  # —à–∫–∞–ª–∞ –æ—Ç 1 –¥–æ 10
        },
        {
            "name": "–ù–∞–ª–∏—á–∏–µ –¥–µ—Ç–µ–π",
            "value_type": "choice",
            "requirements": "–î–∞,–ù–µ—Ç",
        },
    ]

    for item in defaults:
        obj, created = Characteristics.objects.get_or_create(
            name=item["name"],
            defaults={
                "value_type": item["value_type"],
                "requirements": item["requirements"],
            },
        )
        if created:
            print(f"[INIT] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {obj.name}")