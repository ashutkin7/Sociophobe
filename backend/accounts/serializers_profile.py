from rest_framework import serializers
from .models import Users, Characteristics, CharacteristicValues, RespondentCharacteristics


class UserMeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Users
        fields = ['user_id', 'name', 'email', 'role']


class UserStatsSerializer(serializers.Serializer):
    completed_surveys = serializers.IntegerField()
    earned_money = serializers.DecimalField(max_digits=10, decimal_places=2)


# ---------- –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ----------
class CharacteristicSerializer(serializers.ModelSerializer):
    class Meta:
        model = Characteristics
        fields = ['characteristic_id', 'name', 'value_type', 'requirements']

    def validate(self, data):
        value_type = data.get("value_type")
        requirements = (data.get("requirements") or "").strip()

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ ===
        if value_type not in ["numeric", "string", "choice"]:
            raise serializers.ValidationError("value_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'numeric', 'string' –∏–ª–∏ 'choice'.")

        # === –í–∞–ª–∏–¥–∞—Ü–∏—è numeric ===
        if value_type == "numeric":
            try:
                parts = [int(x.strip()) for x in requirements.split(",")]
                if len(parts) != 2 or parts[0] >= parts[1]:
                    raise ValueError
            except Exception:
                raise serializers.ValidationError(
                    "–î–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'min,max' (–Ω–∞–ø—Ä–∏–º–µ—Ä '18,65')."
                )

        # === –í–∞–ª–∏–¥–∞—Ü–∏—è choice ===
        elif value_type == "choice":
            if not requirements or ";" not in requirements:
                raise serializers.ValidationError(
                    "–î–ª—è —Ç–∏–ø–∞ 'choice' –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ ';' (–Ω–∞–ø—Ä–∏–º–µ—Ä '–º;–∂')."
                )

        # === string –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ===
        elif value_type == "string" and requirements:
            raise serializers.ValidationError("–î–ª—è —Ç–∏–ø–∞ 'string' –ø–æ–ª–µ 'requirements' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

        return data


class RespondentCharacteristicSerializer(serializers.ModelSerializer):
    characteristic_id = serializers.IntegerField(source='characteristic_value.characteristic.characteristic_id', read_only=True)
    characteristic_name = serializers.CharField(source='characteristic_value.characteristic.name', read_only=True)
    value = serializers.CharField(source='characteristic_value.value_text')

    class Meta:
        model = RespondentCharacteristics
        fields = ['characteristic_id', 'characteristic_name', 'value']

    def create_or_update(self, user, data):
        for item in data:
            char_id = item['characteristic_id']
            value_text = item['value']
            characteristic = Characteristics.objects.get(characteristic_id=char_id)

            # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É
            if characteristic.value_type == "numeric":
                try:
                    num_value = float(value_text)
                    limits = [float(x.strip()) for x in characteristic.requirements.split(",")]
                    if not (limits[0] <= num_value <= limits[1]):
                        raise serializers.ValidationError(
                            f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value_text}' –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω {limits[0]}‚Äì{limits[1]}"
                        )
                except ValueError:
                    raise serializers.ValidationError(f"–ü–æ–ª–µ '{characteristic.name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

            elif characteristic.value_type == "choice":
                allowed = [v.strip() for v in characteristic.requirements.split(";")]
                if value_text not in allowed:
                    raise serializers.ValidationError(
                        f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{value_text}'. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(allowed)}"
                    )

            # –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            value_obj, _ = CharacteristicValues.objects.get_or_create(
                characteristic=characteristic,
                value_text=value_text
            )
            RespondentCharacteristics.objects.update_or_create(
                user=user, characteristic_value=value_obj
            )
        return RespondentCharacteristics.objects.filter(user=user)
