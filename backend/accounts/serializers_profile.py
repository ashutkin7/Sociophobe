from rest_framework import serializers
from .models import Users, Characteristics, CharacteristicValues, RespondentCharacteristics
from django.db import transaction

class UserMeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Users
        fields = ['user_id', 'name', 'email', 'role']


class UserStatsSerializer(serializers.Serializer):
    completed_surveys = serializers.IntegerField()
    earned_money = serializers.DecimalField(max_digits=10, decimal_places=2)


# ---------- –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ----------
class CharacteristicSerializer(serializers.ModelSerializer):
    class Meta:
        model = Characteristics
        fields = ['characteristic_id', 'name', 'value_type', 'requirements']

    def validate(self, data):
        value_type = data.get("value_type")
        requirements = (data.get("requirements") or "").strip()

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ ===
        if value_type not in ["numeric", "string", "choice"]:
            raise serializers.ValidationError("value_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'numeric', 'string' –∏–ª–∏ 'choice'.")

        # === –í–∞–ª–∏–¥–∞—Ü–∏—è numeric ===
        if value_type == "numeric":
            try:
                parts = [int(x.strip()) for x in requirements.split(",")]
                if len(parts) != 2 or parts[0] >= parts[1]:
                    raise ValueError
            except Exception:
                raise serializers.ValidationError(
                    "–î–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'min,max' (–Ω–∞–ø—Ä–∏–º–µ—Ä '18,65')."
                )

        # === –í–∞–ª–∏–¥–∞—Ü–∏—è choice ===
        elif value_type == "choice":
            if not requirements or ";" not in requirements:
                raise serializers.ValidationError(
                    "–î–ª—è —Ç–∏–ø–∞ 'choice' –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ ';' (–Ω–∞–ø—Ä–∏–º–µ—Ä '–º;–∂')."
                )

        # === string –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ===
        elif value_type == "string" and requirements:
            raise serializers.ValidationError("–î–ª—è —Ç–∏–ø–∞ 'string' –ø–æ–ª–µ 'requirements' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

        return data


class RespondentCharacteristicListSerializer(serializers.ListSerializer):
    """‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π ListSerializer —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π batch create_or_update"""

    def create_or_update(self, user, data):
        for item in data:
            char_id = item['characteristic_id']
            value_text = item['value']
            characteristic = Characteristics.objects.get(characteristic_id=char_id)

            # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É
            if characteristic.value_type == "numeric":
                try:
                    num_value = float(value_text)
                    limits = [float(x.strip()) for x in characteristic.requirements.split(",")]
                    if not (limits[0] <= num_value <= limits[1]):
                        raise serializers.ValidationError(
                            f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value_text}' –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω {limits[0]}‚Äì{limits[1]}"
                        )
                except ValueError:
                    raise serializers.ValidationError(f"–ü–æ–ª–µ '{characteristic.name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

            elif characteristic.value_type == "choice":
                allowed = [v.strip() for v in characteristic.requirements.split(";")]
                if value_text not in allowed:
                    raise serializers.ValidationError(
                        f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{value_text}'. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(allowed)}"
                    )

            # –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            value_obj, _ = CharacteristicValues.objects.get_or_create(
                characteristic=characteristic,
                value_text=value_text
            )
            RespondentCharacteristics.objects.update_or_create(
                user=user, characteristic_value=value_obj
            )

        return RespondentCharacteristics.objects.filter(user=user)


class RespondentCharacteristicSerializer(serializers.ModelSerializer):
    """üß© –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    characteristic_id = serializers.IntegerField(write_only=True)
    value = serializers.CharField(write_only=True)

    characteristic_name = serializers.CharField(
        source='characteristic_value.characteristic.name',
        read_only=True
    )
    value_text = serializers.CharField(
        source='characteristic_value.value_text',
        read_only=True
    )

    class Meta:
        model = RespondentCharacteristics
        fields = ['characteristic_id', 'value', 'characteristic_name', 'value_text']

    def to_representation(self, instance):
        """‚öôÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ‚Üí JSON"""
        char = instance.characteristic_value.characteristic
        return {
            'characteristic_id': char.characteristic_id,
            'characteristic_name': char.name,
            'value': instance.characteristic_value.value_text
        }

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ create_or_update
    @staticmethod
    @transaction.atomic
    def create_or_update(user, validated_data_list):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ —Ç–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ.
        """
        from accounts.models import CharacteristicValues  # –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

        for data in validated_data_list:
            characteristic_id = data.get('characteristic_id')
            value_text = data.get('value')

            try:
                characteristic = Characteristics.objects.get(pk=characteristic_id)
            except Characteristics.DoesNotExist:
                print(f"‚ö†Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ID={characteristic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            value_obj, _ = CharacteristicValues.objects.get_or_create(
                characteristic=characteristic,
                value_text=value_text
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø–∏—Å—å —Å —ç—Ç–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π
            existing = RespondentCharacteristics.objects.filter(
                user=user,
                characteristic_value__characteristic=characteristic
            ).first()

            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                existing.characteristic_value = value_obj
                existing.save()
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user.id}): {characteristic.name} ‚Üí {value_text}")
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                RespondentCharacteristics.objects.create(
                    user=user,
                    characteristic_value=value_obj
                )
                print(f"üÜï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user.id}): {characteristic.name} = {value_text}")
