from django.test import TestCase, override_settings
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APIClient
from django.contrib.auth.tokens import default_token_generator
from django.core import mail
from captcha.models import CaptchaStore
from accounts.models import Users, Characteristics


@override_settings(
    EMAIL_BACKEND='django.core.mail.backends.locmem.EmailBackend',
    FRONTEND_URL='http://127.0.0.1:3000'
)
class AuthFlowTests(TestCase):
    """üîí –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ª–æ–≥–∏–Ω–∞, —Å–º–µ–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è."""

    def setUp(self):
        self.client = APIClient()
        self.user = Users.objects.create_user(
            email='test@example.com',
            name='Tester',
            role='respondent',
            password='OldPass123'
        )

    def test_01_captcha_generation(self):
        """‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏"""
        url = reverse('generate-captcha')
        resp = self.client.get(url)
        self.assertEqual(
            resp.status_code, status.HTTP_200_OK,
            f"[–û—à–∏–±–∫–∞] –û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ 200, –ø–æ–ª—É—á–µ–Ω–æ {resp.status_code}. –û—Ç–≤–µ—Ç: {resp}"
        )
        self.assertIn('captcha_key', resp.data, "[–û—à–∏–±–∫–∞] –ö–ª—é—á 'captcha_key' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.")

    def test_02_registration_with_captcha(self):
        """‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∫–∞–ø—á–µ–π"""
        captcha = CaptchaStore.objects.create(response='abcd')
        url = reverse('register')
        data = {
            'email': 'newuser@example.com',
            'role': 'respondent',
            'password': 'NewPass123',
            'captcha_key': captcha.hashkey,
            'captcha_value': 'abcd'
        }
        resp = self.client.post(url, data, format='json')
        self.assertEqual(
            resp.status_code, status.HTTP_201_CREATED,
            f"[–û—à–∏–±–∫–∞] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ö–æ–¥: {resp.status_code}, –æ—Ç–≤–µ—Ç: {resp}"
        )
        self.assertTrue(
            Users.objects.filter(email='newuser@example.com').exists(),
            "[–û—à–∏–±–∫–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )

    def test_03_login_and_change_password(self):
        """‚úÖ –õ–æ–≥–∏–Ω –∏ —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"""
        url = reverse('login')
        resp = self.client.post(url, {'email': 'test@example.com', 'password': 'OldPass123'}, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] –õ–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è: {resp}")
        token = resp.data.get('access')
        self.assertIsNotNone(token, "[–û—à–∏–±–∫–∞] –ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        # —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {token}')
        url = reverse('change-password')
        resp = self.client.post(url, {'old_password': 'OldPass123', 'new_password': 'NewPass456'}, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: {resp}")

        self.user.refresh_from_db()
        self.assertTrue(self.user.check_password('NewPass456'), "[–û—à–∏–±–∫–∞] –ü–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –ë–î.")

    def test_04_forgot_and_reset_password(self):
        """‚úÖ –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å –∏ —Å–±—Ä–æ—Å"""
        url = reverse('forgot-password')
        resp = self.client.post(url, {'email': 'test@example.com'}, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ forgot-password: {resp}")
        self.assertEqual(len(mail.outbox), 1, "[–û—à–∏–±–∫–∞] –ü–∏—Å—å–º–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        token = default_token_generator.make_token(self.user)
        url = reverse('reset-password') + f'?email={self.user.email}'
        resp = self.client.post(url, {'token': token, 'new_password': 'ResetPass789'}, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–µ —É–¥–∞–ª—Å—è: {resp}")

        self.user.refresh_from_db()
        self.assertTrue(self.user.check_password('ResetPass789'), "[–û—à–∏–±–∫–∞] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è.")


class ProfileTests(TestCase):
    """üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

    def setUp(self):
        self.client = APIClient()
        self.user = Users.objects.create_user(
            email='profile@example.com',
            name='ProfileUser',
            role='respondent',
            password='Pass123'
        )
        self.client.force_authenticate(self.user)

    def test_01_get_and_update_profile(self):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        url = reverse('user-me')
        resp = self.client.get(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] GET /users/me/ ‚Üí {resp}")
        self.assertEqual(resp.data['email'], self.user.email)

        # update
        data = {'name': 'UpdatedName'}
        resp = self.client.put(url, data, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] PUT /users/me/ ‚Üí {resp}")
        self.user.refresh_from_db()
        self.assertEqual(self.user.name, 'UpdatedName')

    def test_02_user_stats(self):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        url = reverse('user-stats')
        resp = self.client.get(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] /users/me/stats ‚Üí {resp}")
        self.assertIn('completed_surveys', resp.data)


class CharacteristicsTests(TestCase):
    """üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ CRUD —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""

    def setUp(self):
        self.client = APIClient()
        self.admin = Users.objects.create_superuser(
            email='admin@example.com', name='Admin', role='customer', password='Admin123'
        )
        self.user = Users.objects.create_user(
            email='respondent@example.com', name='User', role='respondent', password='User123'
        )

    def test_01_admin_crud_characteristics(self):
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–∞–¥–º–∏–Ω)"""
        self.client.force_authenticate(self.admin)

        # CREATE
        url = '/api/admin/characteristics/'
        data = {'name': '–í–æ–∑—Ä–∞—Å—Ç', 'value_type': 'numeric', 'requirements': '18,99'}
        resp = self.client.post(url, data, format='json')
        self.assertEqual(
            resp.status_code, status.HTTP_201_CREATED,
            f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É. –ö–æ–¥: {resp.status_code}, –æ—Ç–≤–µ—Ç: {resp}"
        )
        char_id = resp.data.get('characteristic_id')
        self.assertIsNotNone(char_id, "[–û—à–∏–±–∫–∞] characteristic_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")

        # UPDATE
        resp = self.client.put(f'/api/admin/characteristics/{char_id}/', {'requirements': '1,150'}, format='json')
        self.assertEqual(
            resp.status_code, status.HTTP_200_OK,
            f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É. –ö–æ–¥: {resp.status_code}, –æ—Ç–≤–µ—Ç: {resp}"
        )

        # DELETE
        resp = self.client.delete(f'/api/admin/characteristics/{char_id}/')
        self.assertEqual(
            resp.status_code, status.HTTP_204_NO_CONTENT,
            f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É. –ö–æ–¥: {resp.status_code}, –æ—Ç–≤–µ—Ç: {resp}"
        )

    def test_02_user_characteristics_flow(self):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        # –°–æ–∑–¥–∞—ë–º –≤—Ä—É—á–Ω—É—é 3 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        c1 = Characteristics.objects.create(name="–í–æ–∑—Ä–∞—Å—Ç2", value_type="numeric", requirements="18,99")
        c2 = Characteristics.objects.create(name="–ü–æ–ª2", value_type="choice", requirements="–º;–∂")
        c3 = Characteristics.objects.create(name="–ì–æ—Ä–æ–¥2", value_type="string", requirements="")

        self.client.force_authenticate(self.user)

        # ALL
        resp = self.client.get('/api/users/characteristics/all/')
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] GET all ‚Üí {resp}")

        # VALID UPDATE
        data = [
            {'characteristic_id': c1.characteristic_id, 'value': '25'},
            {'characteristic_id': c2.characteristic_id, 'value': '–º'},
            {'characteristic_id': c3.characteristic_id, 'value': '–ú–æ—Å–∫–≤–∞'}
        ]
        resp = self.client.post('/api/users/characteristics/update/', data, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK, f"[–û—à–∏–±–∫–∞] POST update ‚Üí {resp}")

        # INVALID NUMERIC
        bad = [{'characteristic_id': c1.characteristic_id, 'value': '150'}]
        resp = self.client.post('/api/users/characteristics/update/', bad, format='json')
        self.assertEqual(resp.status_code, status.HTTP_400_BAD_REQUEST, f"[–û—à–∏–±–∫–∞] –û–∂–∏–¥–∞–ª—Å—è 400 –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ‚Üí {resp}")

        # INVALID CHOICE
        bad = [{'characteristic_id': c2.characteristic_id, 'value': '–¥—Ä—É–≥–æ–µ'}]
        resp = self.client.post('/api/users/characteristics/update/', bad, format='json')
        self.assertEqual(resp.status_code, status.HTTP_400_BAD_REQUEST, f"[–û—à–∏–±–∫–∞] –û–∂–∏–¥–∞–ª—Å—è 400 –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ ‚Üí {resp}")
